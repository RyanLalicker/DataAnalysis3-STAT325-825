# Scatterplot: Calf Vigor vs. Final Body Weight
ggplot(data2, aes(x = Calf.Vigor, y = Final.BW, color = SEX, shape = Calan.Treatment)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatterplot of Calf Vigor vs. Final Body Weight", x = "Calf Vigor", y = "Final Body Weight") +
theme_minimal()
# Scatterplot: Calving Ease vs. Final Body Weight
ggplot(data2, aes(x = Calving.Ease, y = Final.BW, color = SEX, shape = Calan.Treatment)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatterplot of Calving Ease vs. Final Body Weight", x = "Calving Ease", y = "Final Body Weight") +
theme_minimal()
## Ryan data set
data2 <- cleaned_data
#| label: fig-exploratory-plots
#| echo: false
#| eval: false
# Load necessary libraries
library(dplyr)
library(ggplot2)
## Toma data set
#data2 <- read.csv("imput_data.csv")
## Ryan data set
data2 <- cleaned_data
# Cross-tabulation: Relationship between treatments and calf sex
crosstab_treatment_sex <- table(data2$Calan.Treatment, data2$SEX)
print(crosstab_treatment_sex)
# Boxplot: Final Body Weight by Treatment and Sex
ggplot(data2, aes(x = Calan.Treatment, y = Final.BW, fill = SEX)) +
geom_boxplot(outlier.color = "red", alpha = 0.7) +
labs(title = "Final Body Weight by Treatment and Sex", x = "Treatment", y = "Final Body Weight") +
theme_minimal()
# Scatterplot: Calf Vigor vs. Final Body Weight
ggplot(data2, aes(x = Calf.Vigor, y = Final.BW, color = SEX, shape = Calan.Treatment)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatterplot of Calf Vigor vs. Final Body Weight", x = "Calf Vigor", y = "Final Body Weight") +
theme_minimal()
# Scatterplot: Calving Ease vs. Final Body Weight
ggplot(data2, aes(x = Calving.Ease, y = Final.BW, color = SEX, shape = Calan.Treatment)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatterplot of Calving Ease vs. Final Body Weight", x = "Calving Ease", y = "Final Body Weight") +
theme_minimal()
#| label: Scratch work
#| echo: false
#| eval: false
# Fit ANCOVA model
ancova_model <- lm(Final.BW ~ Calan.Treatment * SEX + Initial.BW, data = data2)
# Summarize the model
summary(ancova_model)
# Check assumptions
par(mfrow = c(2, 2)) # Arrange diagnostic plots
plot(ancova_model)
#| label: data-setup
#| echo: false
#| eval: true
library(knitr)
library(dplyr)
library(ggplot2)
library(naniar)
library(reshape2)
library(GGally)
library(janitor)
library(emmeans)
data <- read.csv("data.csv")
# Placeholder of original data
origdata <- data
data <- data %>%
mutate(across(everything(), ~ ifelse(. %in% c(".", ""), NA, .)))
#| label: fig-ANCOVA-2
#| echo: false
#| eval: true
# Estimated marginal means and pairwise comparisons
emm <- emmeans(ancova_model, ~ Calan.Treatment | SEX)
pairs(emm)
#| label: fig-ANCOVA-1
#| echo: false
#| eval: true
# Fit ANCOVA model
ancova_model <- lm(Final.BW ~ Calan.Treatment * SEX + Initial.BW, data = data2)
# Summarize the model
summary(ancova_model)
# Check assumptions
par(mfrow = c(2, 2)) # Arrange diagnostic plots
plot(ancova_model)
#| label: Scratch work
#| echo: false
#| eval: false
# Fit ANCOVA model
ancova_model <- lm(Final.BW ~ Calan.Treatment * SEX + Initial.BW, data = data2)
# Summarize the model
summary(ancova_model)
# Check assumptions
par(mfrow = c(2, 2)) # Arrange diagnostic plots
plot(ancova_model)
#| label: fig-ANCOVA-1
#| echo: false
#| eval: true
# Fit ANCOVA model
ancova_model <- lm(Final.BW ~ Calan.Treatment * SEX + Initial.BW, data = data2)
# Summarize the model
summary(ancova_model)
# Check assumptions
par(mfrow = c(2, 2)) # Arrange diagnostic plots
plot(ancova_model)
#| label: fig-Binary-log-reg-GLM
#| echo: false
#| eval: true
# Dichotomize Calf Vigor (example: low = 1, 2; high = 3, 4, 5)
data$Calf.Vigor.Binary <- ifelse(data$Calf.Vigor %in% c(1, 2), "Low", "High")
data$Calf.Vigor.Binary <- factor(data$Calf.Vigor.Binary, levels = c("Low", "High"))
# Fit binary logistic regression
vigor_model_glm <- glm(Calf.Vigor.Binary ~ Calan.Treatment * SEX + Initial.BW,
data = data,
family = binomial(link = "logit"))
# Summarize the model
summary(vigor_model_glm)
#| label: fig-OLR-Model
#| echo: false
#| eval: true
# Convert Calf.Vigor to an ordered factor
data$Calf.Vigor <- factor(data$Calf.Vigor, ordered = TRUE)
# Fit the ordinal logistic regression model
vigor_model <- polr(Calf.Vigor ~ Calan.Treatment * SEX + Initial.BW, data = data, Hess = TRUE)
#| label: data-setup
#| echo: false
#| eval: true
library(knitr)
library(dplyr)
library(ggplot2)
library(naniar)
library(reshape2)
library(GGally)
library(janitor)
library(emmeans)
library(MASS)
data <- read.csv("data.csv")
# Placeholder of original data
origdata <- data
data <- data %>%
mutate(across(everything(), ~ ifelse(. %in% c(".", ""), NA, .)))
#| label: fig-missing-data
#| fig-cap: "Chart counting the number of missing values for each variable within the data."
#| echo: false
#| eval: true
gg_miss_var(data) +
ggtitle("Missing Data Distribution") +
theme_minimal()
#| label: fig-heatmap
#| fig-cap: "Heatmap of missing data."
#| echo: false
#| eval: true
# # Assuming your dataset is named `data`
# # Create a binary matrix indicating missing values
# missing_matrix <- is.na(data)
#
# # Convert the missing matrix to a long format for visualization
# missing_data_long <- melt(missing_matrix)
# colnames(missing_data_long) <- c("Row", "Column", "Missing")
#
# # Create the heatmap
# ggplot(missing_data_long, aes(x = Column, y = Row, fill = Missing)) +
#   geom_tile(color = "white") +
#   scale_fill_manual(values = c("FALSE" = "grey", "TRUE" = "red"),
#                     name = "Missing") +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1),
#         axis.title.x = element_blank(),
#         axis.title.y = element_blank()) +
#   ggtitle("Missing Data Heatmap")
#| label: quant-imputing
#| echo: false
#| eval: true
#colnames(data)
quant <- c("Pen..", "Initial.BW",
"Final.BW", "DMI", "ADG",
"Gest.Length", "X1st.Calf.BW",
"Calving.Ease", "Calf.Vigor", "Final.Calf.BW",
"HCW", "REA", "YG", "BF")
for (var in quant) {
data[[var]] <- as.numeric(data[[var]])
data[[var]][is.na(data[[var]])] <- median(data[[var]], na.rm = TRUE)
}
for (var in names(df)) {
if (!(var %in% quant_vars)) {
df[[var]] <- as.character(df[[var]])
}
}
#| label: cat-cutting
#| echo: false
#| eval: true
#colnames(data)
cat_used <- c("Calan.Treatment", "SEX")
cleaned_data <- data[complete.cases(data[, cat_used]), ]
#| label: normality
#| echo: false
#| eval: true
#| layout-ncol: 4
#| layout-nrow: 5
# Clean column names
data_cleaned <- data_cleaned %>% clean_names()
# Select numerical variables
numeric_vars <- data_cleaned %>% select(where(is.numeric))
#| label: normality
#| echo: false
#| eval: true
#| layout-ncol: 4
#| layout-nrow: 5
# Clean column names
cleaned_data <- cleaned_data %>% clean_names()
# Select numerical variables
numeric_vars <- cleaned_data %>% select(where(is.numeric))
#| label: fig-summarystats
#| echo: false
#| eval: true
# Summary statistics for numerical variables
summary_stats_num <- cleaned_data %>%
summarise(across(where(is.numeric), list(mean = mean, sd = sd, min = min, max = max, median = median), na.rm = TRUE))
# Summary statistics for categorical variables
summary_stats_cat <- cleaned_data %>%
summarise(across(where(is.factor), ~ n_distinct(.)))
print("Summary Statistics for Numerical Variables")
print(summary_stats_num)
print("Summary Statistics for Categorical Variables")
print(summary_stats_cat)
#| label: cat-cutting
#| echo: false
#| eval: true
#colnames(data)
cat_used <- c("Calan.Treatment", "SEX")
cleaned_data <- data[complete.cases(data[, cat_used]), ]
#| label: normality
#| echo: false
#| eval: true
#| layout-ncol: 4
#| layout-nrow: 5
# Clean column names
cleaned_data <- cleaned_data %>% clean_names()
# Select numerical variables
numeric_vars <- cleaned_data %>% select(where(is.numeric))
#| label: normality
#| echo: false
#| eval: true
#| layout-ncol: 4
#| layout-nrow: 5
# Clean column names
cleaned_data <- cleaned_data %>% clean_names()
# Select numerical variables
numeric_vars <- cleaned_data %>% select_if(where(is.numeric))
# Plot histograms for all numerical variables
for (col in colnames(numeric_vars)) {
p <- ggplot(cleaned_data, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = paste("Distribution of", col), x = col, y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Explicitly print the plot
print(p)
}
#| label: fig-exploratory-plots
#| echo: false
#| eval: false
#| layout-ncol: 2
#| layout-nrow: 2
## Toma data set
#data2 <- read.csv("imput_data.csv")
## Ryan data set
data2 <- cleaned_data
# Cross-tabulation: Relationship between treatments and calf sex
crosstab_treatment_sex <- table(data2$Calan.Treatment, data2$SEX)
print(crosstab_treatment_sex)
# Boxplot: Final Body Weight by Treatment and Sex
ggplot(data2, aes(x = Calan.Treatment, y = Final.BW, fill = SEX)) +
geom_boxplot(outlier.color = "red", alpha = 0.7) +
labs(title = "Final Body Weight by Treatment and Sex", x = "Treatment", y = "Final Body Weight") +
theme_minimal()
View(data2)
## Ryan data set
data2 <- cleaned_data
#| label: normality
#| echo: false
#| eval: true
#| layout-ncol: 4
#| layout-nrow: 5
# Select numerical variables
numeric_vars <- cleaned_data %>% select_if(where(is.numeric))
# Plot histograms for all numerical variables
for (col in colnames(numeric_vars)) {
p <- ggplot(cleaned_data, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = paste("Distribution of", col), x = col, y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Explicitly print the plot
print(p)
}
#| label: fig-summarystats
#| echo: false
#| eval: true
# Summary statistics for numerical variables
summary_stats_num <- cleaned_data %>%
summarise(across(where(is.numeric), list(mean = mean, sd = sd, min = min, max = max, median = median), na.rm = TRUE))
# Summary statistics for categorical variables
summary_stats_cat <- cleaned_data %>%
summarise(across(where(is.factor), ~ n_distinct(.)))
print("Summary Statistics for Numerical Variables")
print(summary_stats_num)
print("Summary Statistics for Categorical Variables")
print(summary_stats_cat)
#| label: normality
#| echo: false
#| eval: true
#| layout-ncol: 4
#| layout-nrow: 5
# Select numerical variables
numeric_vars <- cleaned_data %>% select_if(where(is.numeric))
# Plot histograms for all numerical variables
for (col in colnames(numeric_vars)) {
p <- ggplot(cleaned_data, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = paste("Distribution of", col), x = col, y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Explicitly print the plot
print(p)
}
#| label: fig-exploratory-plots
#| echo: false
#| eval: false
#| layout-ncol: 2
#| layout-nrow: 2
## Toma data set
#data2 <- read.csv("imput_data.csv")
## Ryan data set
data2 <- cleaned_data
# Cross-tabulation: Relationship between treatments and calf sex
crosstab_treatment_sex <- table(data2$Calan.Treatment, data2$SEX)
print(crosstab_treatment_sex)
# Boxplot: Final Body Weight by Treatment and Sex
ggplot(data2, aes(x = Calan.Treatment, y = Final.BW, fill = SEX)) +
geom_boxplot(outlier.color = "red", alpha = 0.7) +
labs(title = "Final Body Weight by Treatment and Sex", x = "Treatment", y = "Final Body Weight") +
theme_minimal()
View(data2)
View(data)
#| label: data-setup
#| echo: false
#| eval: true
library(knitr)
library(dplyr)
library(ggplot2)
library(naniar)
library(reshape2)
library(GGally)
library(janitor)
library(emmeans)
library(MASS)
data <- read.csv("data.csv")
# Placeholder of original data
origdata <- data
data <- data %>%
mutate(across(everything(), ~ ifelse(. %in% c(".", ""), NA, .)))
#| label: fig-missing-data
#| fig-cap: "Chart counting the number of missing values for each variable within the data."
#| echo: false
#| eval: true
gg_miss_var(data) +
ggtitle("Missing Data Distribution") +
theme_minimal()
#| label: quant-imputing
#| echo: false
#| eval: true
#colnames(data)
quant <- c("Pen..", "Initial.BW",
"Final.BW", "DMI", "ADG",
"Gest.Length", "X1st.Calf.BW",
"Calving.Ease", "Calf.Vigor", "Final.Calf.BW",
"HCW", "REA", "YG", "BF")
for (var in quant) {
data[[var]] <- as.numeric(data[[var]])
data[[var]][is.na(data[[var]])] <- median(data[[var]], na.rm = TRUE)
}
for (var in names(df)) {
if (!(var %in% quant_vars)) {
df[[var]] <- as.character(df[[var]])
}
}
#| label: cat-cutting
#| echo: false
#| eval: true
#colnames(data)
cat_used <- c("Calan.Treatment", "SEX")
cleaned_data <- data[complete.cases(data[, cat_used]), ]
View(cleaned_data)
#| label: fig-summarystats
#| echo: false
#| eval: true
# Summary statistics for numerical variables
summary_stats_num <- cleaned_data %>%
summarise(across(where(is.numeric), list(mean = mean, sd = sd, min = min, max = max, median = median), na.rm = TRUE))
# Summary statistics for categorical variables
summary_stats_cat <- cleaned_data %>%
summarise(across(where(is.factor), ~ n_distinct(.)))
print("Summary Statistics for Numerical Variables")
print(summary_stats_num)
print("Summary Statistics for Categorical Variables")
print(summary_stats_cat)
#| label: normality
#| echo: false
#| eval: true
#| layout-ncol: 4
#| layout-nrow: 5
# Select numerical variables
numeric_vars <- cleaned_data %>% select_if(where(is.numeric))
# Plot histograms for all numerical variables
for (col in colnames(numeric_vars)) {
p <- ggplot(cleaned_data, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = paste("Distribution of", col), x = col, y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Explicitly print the plot
print(p)
}
View(cleaned_data)
#| label: fig-exploratory-plots
#| echo: false
#| eval: false
#| layout-ncol: 2
#| layout-nrow: 2
## Toma data set
#data2 <- read.csv("imput_data.csv")
## Ryan data set
data2 <- cleaned_data
# Cross-tabulation: Relationship between treatments and calf sex
crosstab_treatment_sex <- table(data2$Calan.Treatment, data2$SEX)
print(crosstab_treatment_sex)
# Boxplot: Final Body Weight by Treatment and Sex
ggplot(data2, aes(x = Calan.Treatment, y = Final.BW, fill = SEX)) +
geom_boxplot(outlier.color = "red", alpha = 0.7) +
labs(title = "Final Body Weight by Treatment and Sex", x = "Treatment", y = "Final Body Weight") +
theme_minimal()
# Scatterplot: Calf Vigor vs. Final Body Weight
ggplot(data2, aes(x = Calf.Vigor, y = Final.BW, color = SEX, shape = Calan.Treatment)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatterplot of Calf Vigor vs. Final Body Weight", x = "Calf Vigor", y = "Final Body Weight") +
theme_minimal()
# Scatterplot: Calving Ease vs. Final Body Weight
ggplot(data2, aes(x = Calving.Ease, y = Final.BW, color = SEX, shape = Calan.Treatment)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatterplot of Calving Ease vs. Final Body Weight", x = "Calving Ease", y = "Final Body Weight") +
theme_minimal()
#| label: fig-ANCOVA-1
#| echo: false
#| eval: true
# Fit ANCOVA model
ancova_model <- lm(Final.BW ~ Calan.Treatment * SEX + Initial.BW, data = data2)
# Summarize the model
summary(ancova_model)
# Check assumptions
par(mfrow = c(2, 2)) # Arrange diagnostic plots
plot(ancova_model)
#| label: fig-ANCOVA-2
#| echo: false
#| eval: true
# Estimated marginal means and pairwise comparisons
emm <- emmeans(ancova_model, ~ Calan.Treatment | SEX)
pairs(emm)
#| label: fig-OLR-Model
#| echo: false
#| eval: true
# Convert Calf.Vigor to an ordered factor
data$Calf.Vigor <- factor(data$Calf.Vigor, ordered = TRUE)
# Fit the ordinal logistic regression model
vigor_model <- polr(Calf.Vigor ~ Calan.Treatment * SEX + Initial.BW, data = data, Hess = TRUE)
# Summarize the model
summary(vigor_model)
# Extract p-values for the coefficients
coefs <- coef(summary(vigor_model))
p_values <- pnorm(abs(coefs[, "t value"]), lower.tail = FALSE) * 2  # Two-tailed p-values
coefs <- cbind(coefs, "p-value" = p_values)
print(coefs)
#| label: fig-Binary-log-reg-GLM
#| echo: false
#| eval: true
# Dichotomize Calf Vigor (example: low = 1, 2; high = 3, 4, 5)
data$Calf.Vigor.Binary <- ifelse(data$Calf.Vigor %in% c(1, 2), "Low", "High")
data$Calf.Vigor.Binary <- factor(data$Calf.Vigor.Binary, levels = c("Low", "High"))
# Fit binary logistic regression
vigor_model_glm <- glm(Calf.Vigor.Binary ~ Calan.Treatment * SEX + Initial.BW,
data = data,
family = binomial(link = "logit"))
# Summarize the model
summary(vigor_model_glm)
#| label: Scratch work
#| echo: false
#| eval: false
# Fit ANCOVA model
ancova_model <- lm(Final.BW ~ Calan.Treatment * SEX + Initial.BW, data = data2)
# Summarize the model
summary(ancova_model)
# Check assumptions
par(mfrow = c(2, 2)) # Arrange diagnostic plots
plot(ancova_model)
#| label: fig-ANCOVA-1
#| echo: false
#| eval: true
#| layout-ncol: 2
#| layout-nrow: 2
# Fit ANCOVA model
ancova_model <- lm(Final.BW ~ Calan.Treatment * SEX + Initial.BW, data = data2)
# Summarize the model
summary(ancova_model)
# Check assumptions
plot(ancova_model)
