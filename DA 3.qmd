---
title: "Data Analysis 3"
authors: 
  Maksuda Aktar Toma,
  Jo Charbonneau,
  Ryan Lalicker
date: today
date-format: long
execute: 
  echo: false
  warning: false
columns: 2
format:
  pdf: 
    extensions-dir: quarto-wordcount/_extensions/wordcount
    fig-align: center
    fig-width: 6
    fig-height: 4
bibliography: references.bib
editor: 
  markdown: 
    wrap: sentence
---

# Introduction

In this paper we will be looking at data related to calves.  The data comes from an experiment designed to study the impact dietary treatments given to pregnant heifers had on the development of the calves.  The study was conducted over a three year period and involved three different dietary treatments given to select groups of heifers in the final trimester.  In total the data has 22 variables for 120 entires, though some data points are missing.

For more information on the experiment, the data, or any other files used in this paper see our [Github page](https://github.com/RyanLalicker/Data-Analysis-2-STAT-325-825) which can be found at https://github.com/RyanLalicker/Data-Analysis-2-STAT-325-825.  The coding languages used in the paper are R and SAS.  The corresponding code can be found in *Appendix A - R Code* and *Appendix B - SAS Code* respectively.

## Variables

As mentioned above the experiment used three different dietary treatments.  These were DDG, CON, and MET.  For the first two trimesters the heifers were given one of seven developmental treatments, found in `Development.Treatment`, and then in the final trimester the each was given one of the three treatments mentioned above.  This is recorded in the `Calan.Treatment` column of the data set.  

The heifers were placed into one of four pens by weight, which can be seen in the column `Pen #`.  They were then artificially inseminated from an assigned sire, which we will assume was done randomly since the client says weight was not a factor.  The sire is represented by the column of the same name and has six unique entries.

Upon the birth of the calves, several measurements were taken.  These include the sex of the calf, weights taken at both birth and slaughter, and scores of both the calf's vigor and the ease of birth.  The variable names line up with these descriptions.

Other variables, such as the id of the calf, length of gestation for the heifer, and postmortem scoring such as hot carcass weight (HCW) are included as well.  (@UNLBeef).  Note two birthdays are included in the data, `Birth.date` and `Birth.date.1`.  These variables will not be used in the models below so no further investigation was done on our part to determine the differences.  

The client's main focus is the effect the third trimester treatment and the sex of a calf have on the calf's vigor score, ease of birth score, and final body weight.  Therefore, these are the variables we will place more of an emphasis on, while exploring the effect some of the other variables may have.


## Missing Data

**UPDATE THIS AFTER SEEING WHAT VARIABLES ARE NEEDED FOR THE MODEL**

The data contains some missing values.  In regards to the five variables the client is most interested in, 19 entries are missing one or more values.  Since that still leaves 101 entries with all five variables 


## Cleaning the dataset
The dataset format is not in correct variable type. At first need to change the variable type. Accept Id AND Pen all other variables were in categorical type. After cleaning the dataset, here is the updated classification:

Categorical Variables:
Birth date
Development Treatment
Calan Treatment
Calved First 21 Days
Calving Ease
Calf Vigor
Birth date .1
Sire
SEX

Quantitative Variables:
ID
Pen #
Initial BW
Final BW
DMI
ADG
Gest Length
1st Calf BW
Final Calf BW
HCW
REA
YG
BF

```{r}
read.csv("data.csv")
# Load necessary library
library(dplyr)

# Assuming your dataset is loaded as `data`
# Replace '.' with NA and convert potential numeric variables to numeric
data <- data %>%
  mutate(
    `Initial BW` = as.numeric(replace(`Initial.BW`, `Initial.BW` == ".", NA)),
    `Final BW` = as.numeric(replace(`Final.BW`, `Final.BW` == ".", NA)),
    `DMI` = as.numeric(replace(`DMI`, `DMI` == ".", NA)),
    `ADG` = as.numeric(replace(`ADG`, `ADG` == ".", NA)),
    `Gest Length` = as.numeric(replace(`Gest.Length`, `Gest.Length` == ".", NA)),
    `1st Calf BW` = as.numeric(replace(`X1st.Calf.BW`, `X1st.Calf.BW` == ".", NA)),
    `Final Calf BW` = as.numeric(replace(`Final.Calf.BW`, `Final.Calf.BW` == ".", NA)),
    `HCW` = as.numeric(replace(`HCW`, `HCW` == ".", NA)),
    `REA` = as.numeric(replace(`REA`, `REA` == ".", NA)),
    `YG` = as.numeric(replace(`YG`, `YG` == ".", NA)),
    `BF` = as.numeric(replace(`BF`, `BF` == ".", NA))
  )

# Verify the data types
str(data)
head(data)
```
**Ryan's old file code**
```{r, , fig.pos="H"}
#| label: data-setup
#| echo: false
#| eval: true

library(knitr)
library(dplyr)
library(ggplot2)
data <- read.csv("data.csv")
origdata <- data
data <- data %>%
  mutate(across(everything(), ~ ifelse(. %in% c(".", ""), NA, .)))
# May need to add more later.
neededvars <- c("Calan.Treatment", "SEX", "Final.Calf.BW", "Calving.Ease", "Calf.Vigor")
data <- data[complete.cases(data[, neededvars]), ]
head(data)
str(data)
```
**Ryan's old file code** [I include this part in next chunk]
```{r, , fig.pos="H"}
#| label: Scratch-work
#| echo: false
#| eval: false

summary(data)


length(unique(na.omit(data$Sire)))
length(unique(na.omit(data$Development.Treatment)))
sum(rowSums(is.na(data)) > 0)

```

**Ryan's old file**
```{r, , fig.pos="H"}
#| label: data-setup
#| echo: false
#| eval: true

library(knitr)
library(dplyr)
library(ggplot2)
setwd("C:/Users/mtoma2/Documents/Fall 24/Stat 825/Data Analysis/DataAnalysis3-STAT325-825")
data <- read.csv("data.csv")



origdata <- data
data <- data %>%
  mutate(across(everything(), ~ ifelse(. %in% c(".", ""), NA, .)))
# May need to add more later.
neededvars <- c("Calan.Treatment", "SEX", "Final.Calf.BW", "Calving.Ease", "Calf.Vigor")
data <- data[complete.cases(data[, neededvars]), ]

```

## Misiing Value

Columns with Missing Values:

Pen #: 4 missing values
DMI: 36 missing values
SEX: 1 missing value
Unique Levels:

Sire: 6 unique levels
Development Treatment: 7 unique levels
Rows with Missing Data:

34 rows contain at least one missing value.

The heatmap above visualizes the distribution of missing data in the dataset. Columns with missing values (e.g., "Pen #", "DMI", and "SEX") are marked with red line gaps.
```{r, , fig.pos="H"}
#| label: Scratch-work
#| echo: false
#| eval: false

# Load necessary libraries
library(ggplot2)
library(naniar)

# Assuming your dataset is named `data`
# Visualize missing data distribution
gg_miss_var(data) +
  ggtitle("Missing Data Distribution") +
  theme_minimal()

#2. Heatmap
# Load necessary libraries
library(ggplot2)
library(reshape2)

# Assuming your dataset is named `data`
# Create a binary matrix indicating missing values
missing_matrix <- is.na(data)

# Convert the missing matrix to a long format for visualization
missing_data_long <- melt(missing_matrix)
colnames(missing_data_long) <- c("Row", "Column", "Missing")

# Create the heatmap
ggplot(missing_data_long, aes(x = Column, y = Row, fill = Missing)) +
  geom_tile(color = "white") +
  scale_fill_manual(values = c("FALSE" = "grey", "TRUE" = "red"), 
                    name = "Missing") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  ggtitle("Missing Data Heatmap")




length(unique(na.omit(data$Sire)))
length(unique(na.omit(data$Development.Treatment)))
sum(rowSums(is.na(data)) > 0)

```

# Handling Missing Value
This code cleans a dataset by replacing all occurrences of . with NA to standardize missing values. It ensures columns are assigned the correct data types, converting numeric-like columns to numeric and others to factor. Missing values are handled by imputing the median for numeric columns and the mode for factor columns. After cleaning, the code verifies that no missing values remain in the dataset.

```{r}
# Load necessary library
library(dplyr)


# Handle missing values in `Pen..`: Impute with the most frequent category
pen_mode <- names(sort(table(data$`Pen..`), decreasing = TRUE))[1]
data <- data %>%
  mutate(`Pen..` = ifelse(is.na(`Pen..`), pen_mode, `Pen..`))

# Handle missing values in `DMI`: Impute with the mean (or median)
dmi_mean <- mean(data$DMI, na.rm = TRUE)
data <- data %>%
  mutate(DMI = ifelse(is.na(DMI), dmi_mean, DMI))

# Handle missing values in `SEX`: Impute with the most frequent category
sex_mode <- names(sort(table(data$SEX), decreasing = TRUE))[1]
data <- data %>%
  mutate(SEX = ifelse(is.na(SEX), sex_mode, SEX))

# Remove rows with excessive missing values (e.g., more than a threshold)
# In this case, removing rows with more than 2 missing values
threshold <- 2
data1 <- data %>%
  filter(rowSums(is.na(.)) <= threshold)

# Verify the structure and missing values after handling
summary(data)
sum(is.na(data)) # Total missing values remaining
View(data)
```
```{r}
# Save the modified dataset as a CSV file
write.csv(data, "imput_data.csv", row.names = FALSE)

library(readr)
imput_data <- read_csv("imput_data.csv")
head(imput_data)

```
## Summary Statistic
[Note: I did seperately and together both way. whichever you like add that only]
```{r}
# Load necessary libraries
library(dplyr)
library(ggplot2)

# Load the dataset (replace 'imput_data.csv' with the correct path if needed)
data2 <- read.csv("imput_data.csv")

# Step 2: Descriptive Analysis

# 1. Summarize key variables
summary_stats <- data2 %>%
  summarise(
    Mean_Final_BW = mean(Final.BW, na.rm = TRUE),
    Median_Final_BW = median(Final.BW, na.rm = TRUE),
    SD_Final_BW = sd(Final.BW, na.rm = TRUE),
    Mean_ADG = mean(ADG, na.rm = TRUE),
    Median_ADG = median(ADG, na.rm = TRUE),
    SD_ADG = sd(ADG, na.rm = TRUE),
    Mean_DMI = mean(DMI, na.rm = TRUE),
    Median_DMI = median(DMI, na.rm = TRUE),
    SD_DMI = sd(DMI, na.rm = TRUE)
  )

print(summary_stats)

# 2. Visualize distributions

# Histogram for Final Body Weight
ggplot(data2, aes(x = Final.BW)) +
  geom_histogram(binwidth = 20, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of Final Body Weight", x = "Final BW", y = "Frequency") +
  theme_minimal()

# Histogram for Final Calf Body Weight
ggplot(data2, aes(x = Final.Calf.BW)) +
  geom_histogram(binwidth = 20, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of Final Calf Body Weight", x = "Final Calf BW", y = "Frequency") +
  theme_minimal()

par(mfrow = c(2, 2)) 

# Boxplot for Final Body Weight by Treatment
ggplot(data2, aes(x = Calan.Treatment, y = Final.BW, fill = Calan.Treatment)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Boxplot of Final Body Weight by Treatment", x = "Treatment", y = "Final BW") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3")

# Boxplot for Final Body Weight by Sex
ggplot(data2, aes(x = SEX, y = Final.BW, fill = SEX)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Boxplot of Final Body Weight by Sex", x = "Sex", y = "Final BW") +
  theme_minimal() +
  scale_fill_brewer(palette = "Pastel1")

# Boxplot for Final Calf Body Weight by Treatment
ggplot(data2, aes(x = Calan.Treatment, y = Final.Calf.BW, fill = Calan.Treatment)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Boxplot of Final Body Weight by Treatment", x = "Treatment", y = "Final BW") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3")

# Boxplot for Final Calf Body Weight by Sex
ggplot(data2, aes(x = SEX, y = Final.Calf.BW, fill = SEX)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Boxplot of Final Body Weight by Sex", x = "Sex", y = "Final BW") +
  theme_minimal() +
  scale_fill_brewer(palette = "Pastel1")

```

**Interpretation of Box plot for Calf Body Weight:**
MET treatment consistently shows the highest median final body weight, followed by DDG, while CON has the lowest median and the narrowest range. STR (steers) exhibit higher median body weights and greater variability compared to HFR (heifers), which show narrower distributions. Outliers are more pronounced in MET and STR groups, reflecting individual variation among calves. These findings suggest MET is the most effective treatment for promoting growth, while CON may be limited in its ability to achieve higher body weights. Overall, both treatment and sex significantly influence calf body weight outcomes
```{r}
# Load necessary libraries
library(ggplot2)
library(gridExtra)

# Boxplot for Final Body Weight by Treatment
plot1 <- ggplot(data2, aes(x = Calan.Treatment, y = Final.BW, fill = Calan.Treatment)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Boxplot of Final Body Weight by Treatment", x = "Treatment", y = "Final BW") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3")

# Boxplot for Final Body Weight by Sex
plot2 <- ggplot(data2, aes(x = SEX, y = Final.BW, fill = SEX)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Boxplot of Final Body Weight by Sex", x = "Sex", y = "Final BW") +
  theme_minimal() +
  scale_fill_brewer(palette = "Pastel1")

# Boxplot for Final Calf Body Weight by Treatment
plot3 <- ggplot(data2, aes(x = Calan.Treatment, y = Final.Calf.BW, fill = Calan.Treatment)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Boxplot of Final Calf Body Weight by Treatment", x = "Treatment", y = "Final BW") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3")

# Boxplot for Final Calf Body Weight by Sex
plot4 <- ggplot(data2, aes(x = SEX, y = Final.Calf.BW, fill = SEX)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Boxplot of Final Calf Body Weight by Sex", x = "Sex", y = "Final BW") +
  theme_minimal() +
  scale_fill_brewer(palette = "Pastel1")

# Arrange the plots in a grid
grid.arrange(plot1, plot2, plot3, plot4, nrow = 2, ncol = 2)

```


# Exploring the Data
 **Relationship between treatments and calf sex**
The cross-tabulation shows a relatively balanced distribution of calf sex across treatments. In the CON group, there are slightly more HFR (heifers) than STR (steers), with 19 and 15 calves, respectively. The DDG group has more STR (20) compared to HFR (14), while the MET group is more evenly distributed with 18 HFR and 15 STR. Overall, the distribution of sexes across treatments suggests no significant bias in the assignment of calves, supporting a fair experimental design. The slightly higher proportion of STR in DDG might warrant further exploration but does not indicate a major imbalance.

MET treatment consistently produces the highest median final body weights for both sexes, with STR (steers) outperforming HFR (heifers) across all treatments. Higher vigor scores (2 and 3) are linked to greater body weights, particularly under the MET treatment, which shows the largest variability and outliers. Easier births (calving ease scores of 1) are associated with higher body weights, with MET-treated calves and STR consistently achieving the best outcomes. Across all analyses, the MET treatment emerges as the most favorable, with DDG showing intermediate performance and CON yielding the lowest body weights. These results highlight the significant influence of treatment, sex, calf vigor, and calving ease on final Calf body weight outcomes.

[Note: I think we need to focus on calf body wight. Not the body weight of mother cow]
```{r, , fig.pos="H"}
#| label: Scratch work
#| echo: false
#| eval: false
# Load necessary libraries
library(dplyr)
library(ggplot2)

# Load the dataset (replace 'imput_data.csv' with the correct path if needed)
data2 <- read.csv("imput_data.csv")

# Cross-tabulation: Relationship between treatments and calf sex
crosstab_treatment_sex <- table(data2$Calan.Treatment, data2$SEX)
print(crosstab_treatment_sex)

# Boxplot: Final Body Weight by Treatment and Sex
ggplot(data2, aes(x = Calan.Treatment, y = Final.BW, fill = SEX)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Final Body Weight by Treatment and Sex", x = "Treatment", y = "Final Body Weight") +
  theme_minimal()

# Scatterplot: Calf Vigor vs. Final Body Weight
ggplot(data2, aes(x = Calf.Vigor, y = Final.BW, color = SEX, shape = Calan.Treatment)) +
  geom_point(size = 3, alpha = 0.7) +
  labs(title = "Scatterplot of Calf Vigor vs. Final Body Weight", x = "Calf Vigor", y = "Final Body Weight") +
  theme_minimal()

# Scatterplot: Calving Ease vs. Final Body Weight
ggplot(data2, aes(x = Calving.Ease, y = Final.BW, color = SEX, shape = Calan.Treatment)) +
  geom_point(size = 3, alpha = 0.7) +
  labs(title = "Scatterplot of Calving Ease vs. Final Body Weight", x = "Calving Ease", y = "Final Body Weight") +
  theme_minimal()

# Boxplot: Final Calf Body Weight by Treatment and Sex
ggplot(data2, aes(x = Calan.Treatment, y = Final.Calf.BW, fill = SEX)) +
  geom_boxplot(outlier.color = "red", alpha = 0.7) +
  labs(title = "Final Calf Body Weight by Treatment and Sex", x = "Treatment", y = "Final Calf Body Weight") +
  theme_minimal()

# Scatterplot: Calf Vigor vs. Final Calf Body Weight
ggplot(data2, aes(x = Calf.Vigor, y = Final.Calf.BW, color = SEX, shape = Calan.Treatment)) +
  geom_point(size = 3, alpha = 0.7) +
  labs(title = "Scatterplot of Calf Vigor vs. Final Calf Body Weight", x = "Calf Vigor", y = "Final Calf Body Weight") +
  theme_minimal()

# Scatterplot: Calving Ease vs. Final Calf Body Weight
ggplot(data2, aes(x = Calving.Ease, y = Final.Calf.BW, color = SEX, shape = Calan.Treatment)) +
  geom_point(size = 3, alpha = 0.7) +
  labs(title = "Scatterplot of Calving Ease vs. Final Calf Body Weight", x = "Calving Ease", y = "Final Calf Body Weight") +
  theme_minimal()

```

## Model
**Ordinal Logistic Regression Model for Calf Vigor**
```{r}
library(MASS)

# Ensure Calf.Vigor is an ordered factor
data2$Calf.Vigor <- factor(data2$Calf.Vigor, ordered = TRUE)


# Fit the ordinal logistic regression model
vigor_model_1 <- polr(Calf.Vigor ~ Calan.Treatment * SEX, data = data2, Hess = TRUE)

# Summarize the model
summary(vigor_model_1)

# Extract p-values
coefs <- coef(summary(vigor_model_1))
p_values <- pnorm(abs(coefs[, "t value"]), lower.tail = FALSE) * 2  # Two-tailed p-values
coefs <- cbind(coefs, "p-value" = p_values)
print(coefs)

```

**Comparison**
```{r}

# Perform pairwise comparisons using estimated marginal means
library(emmeans)
emm_vigor <- emmeans(vigor_model_1, ~ Calan.Treatment | SEX)
pairs(emm_vigor)

```


**Model 2: Multinomial Logistic Regression for Calf Vigor**
```{r}
library(nnet)
vigor_model_2 <- multinom(Calf.Vigor ~ Calan.Treatment * SEX, data = data2)
summary(vigor_model_2)

```
**Model 1: OLR for Calving Ease**
```{r}
# Ensure Calving.Ease is an ordered factor
data2$Calving.Ease <- factor(data2$Calving.Ease, ordered = TRUE)

library(MASS)

# Fit the ordinal logistic regression model
ease_model_3 <- polr(Calving.Ease ~ Calan.Treatment * SEX, data = data2, Hess = TRUE)

# Summarize the model
summary(ease_model_3)

# Extract p-values
coefs <- coef(summary(ease_model_3))
p_values <- pnorm(abs(coefs[, "t value"]), lower.tail = FALSE) * 2  # Two-tailed p-values
coefs <- cbind(coefs, "p-value" = p_values)
print(coefs)

```


**Model 2: Multinomial Logistic Regression for Calf Calving Ease**

```{r}
library(nnet)
ease_model_4 <- multinom(Calving.Ease ~ Calan.Treatment * SEX, data = data2)
summary(ease_model_4)

# Fit multinomial logistic regression model
library(nnet)
# Perform pairwise comparisons using estimated marginal means
emm_ease <- emmeans(ease_model_4, ~ Calan.Treatment | SEX)
pairs(emm_ease)

```
**Model 1: LM for Final Calf Weight**
```{r}
weight_model_5 <- lm(Final.Calf.BW ~ Calan.Treatment * SEX, data = data2)
summary(weight_model_5)

```

**Comparison**
```{r}

# Ensure Calan.Treatment is a factor
data2$Calan.Treatment <- as.factor(data2$Calan.Treatment)

# Fit the linear model again (if not already fitted)
weight_model_5 <- lm(Final.Calf.BW ~ Calan.Treatment * SEX, data = data2)

# Perform Tukey HSD test
library(multcomp)
tukey_weight <- glht(weight_model_5, linfct = mcp(Calan.Treatment = "Tukey"))

# Summarize the results
summary(tukey_weight)



```

**Linear Mixed Model**
```{r}
library(lme4)
weight_model_6 <- lmer(Final.Calf.BW ~ Calan.Treatment * SEX + (1|Pen..) + (1|Sire), data = data2)
summary(weight_model_6)

# Perform Tukey HSD test
library(multcomp)
tukey_weight1 <- glht(weight_model_6, linfct = mcp(Calan.Treatment = "Tukey"))

# Summarize the results
summary(tukey_weight1)

# Perform pairwise comparisons using emmeans
library(emmeans)
emm_weight <- emmeans(weight_model_6, ~ Calan.Treatment | SEX)
pairs(emm_weight)
```

[This two I made first. I included initial Wight here. Let me know what you think of including it. As, it's significant might be helpful]
1. ANCOVA Model for Final Calf Weight
```{r, , fig.pos="H"}
#| label: Scratch work
#| echo: false
#| eval: false

# Fit ANCOVA model
ancova_model <- lm(Final.Calf.BW ~ Calan.Treatment * SEX + Initial.BW, data = data2)

# Summarize the model
summary(ancova_model)

# Check assumptions
par(mfrow = c(2, 2)) # Arrange diagnostic plots
plot(ancova_model)



```

**Post Hoc Test**
```{r}
library(emmeans)

# Estimated marginal means and pairwise comparisons
emm <- emmeans(ancova_model, ~ Calan.Treatment | SEX)
pairs(emm)

```


**2. OLR Model**
```{r}
library(MASS)

# Convert Calf.Vigor to an ordered factor
data$Calf.Vigor <- factor(data$Calf.Vigor, ordered = TRUE)

# Fit the ordinal logistic regression model
vigor_model <- polr(Calf.Vigor ~ Calan.Treatment * SEX + Initial.BW, data = data, Hess = TRUE)

# Summarize the model
summary(vigor_model)

# Extract p-values for the coefficients
coefs <- coef(summary(vigor_model))
p_values <- pnorm(abs(coefs[, "t value"]), lower.tail = FALSE) * 2  # Two-tailed p-values
coefs <- cbind(coefs, "p-value" = p_values)
print(coefs)


```
**3. Binary Logistic Regression with GLM**
```{r}
# Dichotomize Calf Vigor (example: low = 1, 2; high = 3, 4, 5)
data$Calf.Vigor.Binary <- ifelse(data$Calf.Vigor %in% c(1, 2), "Low", "High")
data$Calf.Vigor.Binary <- factor(data$Calf.Vigor.Binary, levels = c("Low", "High"))

# Fit binary logistic regression
vigor_model_glm <- glm(Calf.Vigor.Binary ~ Calan.Treatment * SEX + Initial.BW, 
                       data = data, 
                       family = binomial(link = "logit"))

# Summarize the model
summary(vigor_model_glm)

```




```{r, , fig.pos="H"}
#| label: fig-summarystats
#| echo: false
#| eval: true


```


```{r, , fig.pos="H"}
#| label: fig-normallity
#| echo: false
#| eval: true
#| layout-ncol: 2
#| fig-cap: ""
#| fig-subcap: 
#|  - ""
#|  - ""
#| fig-width: 6
#| fig-height: 4

```

## Relationships among variables

# Potential models


## Model 1



$$
y_{ijklmn} = ENTER-MODEL-HERE
$$

where $y_{ijklm}$ represents the *dependent variable*, ...

```![Picture of SAS Output](filename.png){width="3in"}```

# Conclusion

# Recomendation

\newpage

# References

::: {#refs}
:::

\newpage

# Appendix A - R Code

```{r, , fig.pos="H"}
#| label: appendix A
#| echo: true
#| eval: false

```

\newpage

# Appendix B - SAS Code

``` sas

```

\newpage

# Appendix C - Additional SAS Output



```![](filename.png)```
